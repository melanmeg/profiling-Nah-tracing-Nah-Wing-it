apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: opentelemetry-collector
  namespace: argocd
spec:
  project: cluster-wide-apps
  source:
    chart: opentelemetry-collector
    repoURL: https://open-telemetry.github.io/opentelemetry-helm-charts
    targetRevision: 0.105.1
    helm:
      releaseName: opentelemetry-collector
      values: |
        mode: daemonset
        image:
          repository: otel/opentelemetry-collector-k8s
        command:
          name: otelcol-k8s
        presets:
          # enables the k8sattributesprocessor and adds it to the traces, metrics, and logs pipelines
          kubernetesAttributes:
            enabled: true
          # enables the kubeletstatsreceiver and adds it to the metrics pipelines
          kubeletMetrics:
            enabled: true
          # Enables the filelogreceiver and adds it to the logs pipelines
          logsCollection:
            enabled: true
            includeCollectorLogs: true
          hostMetrics:
            enabled: true
        config:
          receivers:
            otlp:
              protocols:
                grpc:
                  endpoint: 0.0.0.0:4317
                http:
                  endpoint: 0.0.0.0:4318
                  cors:
                    allowed_origins:
                      - "http://*"
                      - "https://*"
            prometheus:
              config:
                scrape_configs:
                  - job_name: 'otel-collector'
                    scrape_interval: 5s
                    static_configs:
                      - targets: ['0.0.0.0:8888']
                  - job_name: k8s
                    kubernetes_sd_configs:
                    - role: pod
                    relabel_configs:
                    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                      regex: "true"
                      action: keep
                    metric_relabel_configs:
                    - source_labels: [__name__]
                      regex: "(request_duration_seconds.*|response_duration_seconds.*)"
                      action: keep
          processors:
            batch: {}
            # batch/2: #二つ目の設定
            #   send_batch_size: 1000
            #   timeout: 10s
            resourcedetection:
              detectors: [konpeko, otelcol]
              override: true
            resource:
              attributes:
                - key: server-type
                  value: "K8s Server"
                  action: upsert
            memory_limiter:
              check_interval: 5s
              limit_percentage: 80
              spike_limit_percentage: 25
            metricstransform:
              transforms:
                - include: ^system\.cpu\.
                  action: update
                  operations:
                    - action: update_label
                      label: state
                      new_label: cpu_state
          exporters:
            # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
            debug: {}
            otlp:
              endpoint: tempo-distributed-distributor.tracing:4317
              tls:
                insecure: true
            otlphttp/mimir:
              endpoint: http://mimir-distributed-nginx.monitoring:80/otlp
              tls:
                insecure: true
            otlphttp/loki:
              endpoint: http://loki-gateway.logging/otlp
              tls:
                insecure: true
          service:
            pipelines:
              traces:
                processors: [memory_limiter, batch]
                exporters: [otlp, debug, spanmetrics]
              metrics:
                receivers: [prometheus, otlp, spanmetrics]
                processors: [memory_limiter, batch]
                exporters: [otlphttp/mimir, debug]
              logs:
                processors: [memory_limiter, batch]
                exporters: [otlphttp/loki, debug]
            extensions:
              - health_check
            telemetry:
              metrics:
                address: 0.0.0.0:8888
          extensions:
            health_check: {}
          connectors:
            spanmetrics: {}
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
  destination:
    server: https://kubernetes.default.svc
    namespace: otel
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
